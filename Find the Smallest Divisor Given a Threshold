class Solution {
public:
int sumByD(vector<int> & nums ,int div){
    int sum = 0;
    int n = nums.size();
    //find summation of divisor value
    for(int i=0;i<n;i++){
        sum += ceil((double)(nums[i])/(double)(div));
    }
    return sum;
}
    int smallestDivisor(vector<int>& nums, int threshold) {
        int n = nums.size();
        if(n>threshold)return -1;
        //*max_element() returns an iterator pointing to the element with the largest value in the range [first, last)
        int low = 1,high = *max_element(nums.begin(),nums.end());
        //apply binary search
        while(low<=high)
        {
            int mid = (low+high)/2;
            if(sumByD(nums,mid)<=threshold){
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return low;
    }
};
