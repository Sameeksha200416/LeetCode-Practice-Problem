class Solution {
public:
//use long long instead of int: To avoid this overflow, you can change the type of int to long long wherever you suspect large values might be used. The long long type can store much larger integers  
long long findmax(vector<int>& piles){
    long long maxi = LLONG_MIN;
    int n = piles.size();
    //find the maximum
    for(int i=0;i<n;i++){
        maxi = max(maxi,(long long)piles[i]);
    }
    return maxi;
}
long long calculateTotalHours(vector<int>& piles,long long hourly){
    long long totalH = 0;
    int n = piles.size();
    //calculate the totalH
    for(int i=0;i<n;i++){
        totalH += ceil((double)(piles[i])/(double)(hourly));
    }
    return totalH;
}
    int minEatingSpeed(vector<int>& piles, int h) {
        long long low = 1,high = findmax(piles);
        //apply binary search
        while(low<=high){
            long long mid = low+(high-low)/2;
            long long totalH = calculateTotalHours(piles,mid);
            if(totalH<=h){
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return low;
    }
};
